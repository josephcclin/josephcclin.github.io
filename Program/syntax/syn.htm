<html>

<head>

<title>An LALR(1) Parser for Lotus Language</title>
</head>

<body>
<br>
<b>
<font face="Times New Roman" size="5">An LALR(1) parser for Lotus</font>
</b>
<br>
<br>
<br>
<font face="Times New Roman">This LALR(1) parser is generated by using the tool
<i> Bison</i>. The grammar is given as follows.
<br>
</font>
<br>
<br>
<b><font face="Times New Roman">Grammar</font></b>
<br>
<br>
<font face="Courier New">program -&gt; variable_declarations 
function_definitions<br>
variable_declarations -&gt; empty | variable_declarations variable_declaration<br>
variable_declaration -&gt; int Identifier ; <br>
function_definitions -&gt; function_definition | function_definitions 
function_definition<br>
function_definition -&gt; int Identifier ( parameters ) function_body<br>
parameters -&gt; empty | parameter_list<br>
parameter_list -&gt; int Identifier | parameter_list , int Identifier<br>
function_body -&gt; { variable_declarations statements }<br>
statements -&gt; empty | statements statement<br>
statement -&gt; assignment_statement | compound_statement <br>
| if_statement | while_statement | return_statement <br>
| exit_statement | read_statement | write_statement<br>
assignment_statement -&gt; Identifier = arith_expression ;<br>
compound_statement -&gt; { statements }<br>
if_statement -&gt; if ( bool_expression ) statement <br>
| if ( bool_expression ) statement else statement <br>
while_statement -&gt; while ( bool_expression ) statement<br>
return_statement -&gt; return arith_expression ;<br>
exit_statement -&gt; exit ;<br>
read_statement -&gt; read Identifier ; <br>
write_statement -&gt; write arith_expression ; <br>
bool_expression -&gt; bool_term | bool_expression || bool_term<br>
bool_term -&gt; bool_factor | bool_term &amp;&amp; bool_factor<br>
bool_factor -&gt; bool_primary | ! bool_primary<br>
bool_primary -&gt; arith_expression == arith_expression<br>
| arith_expression != arith_expression<br>
| arith_expression &gt; arith_expression<br>
| arith_expression &gt;= arith_expression<br>
| arith_expression &lt; arith_expression<br>
| arith_expression &lt;= arith_expression<br>
| ( bool_expression )<br>
arith_expressions -&gt; empty | arith_expression_list<br>
arith_expression_list -&gt; arith_expression | arith_expression_list , 
arith_expression<br>
arith_expression -&gt; arith_term | arith_expression + arith_term<br>
| arith_expression - arith_term<br>
arith_term -&gt; arith_factor <br>
| arith_term * arith_factor<br>
| arith_term / arith_factor<br>
| arith_term % arith_factor<br>
arith_factor -&gt; arith_primary | - arith_primary<br>
arith_primary -&gt; Integer | Identifier <br>
| Identifier ( arith_expressions ) | ( arith_expression )</font><font face="Times New Roman"><br>
</font>
<br>
<b><font face="Times New Roman">Description</font></b>
<br>
<br>
<font face="Times New Roman">
The parser can parse a program written in Lotus defined above. The parser can 
trace the parsing process by using the option &quot;-p&quot; to print each production 
reduced by the parser. Yet, no syntax error recovery is performed. Each syntax 
error message will include the line number where the error is detected. The 
parser reads input from stdin, writes output to stdout, and writes errors to 
stderr.
</font>
<br>
<br>

</body>

</html>